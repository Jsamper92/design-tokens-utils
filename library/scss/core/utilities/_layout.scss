// DISPLAY - create a display container
.ds-none {
  display: none;
}
.ds-inline {
  display: inline;
}
.ds-block {
  display: block;
}
.ds-inline-block {
  display: inline-block;
}
.ds-flex {
  display: flex;
}
.ds-inline-flex {
  display: inline-flex;
}
.ds-grid {
  display: grid;
}
.ds-inline-grid {
  display: inline-grid;
}
.ds-table {
  display: table;
}

// FLEX WRAP - Controls whether the flex container is single-line or multi-line, and the direction of the cross-axis, which determines the direction new lines are stacked in
.ds-flex-wrap {
  flex-wrap: wrap;
}
.ds-flex-wrap-reverse {
  flex-wrap: wrap-reverse;
}
.ds-flex-nowrap {
  flex-wrap: nowrap;
}

// FLEX DIRECTION - set the direction of flex items in a flex container with direction utilities
.ds-flex-row {
  flex-direction: row;
}
.ds-flex-column {
  flex-direction: column;
}
.ds-flex-row-reverse {
  flex-direction: row-reverse;
}
.ds-flex-column-reverse {
  flex-direction: column-reverse;
}

// FLEX JUSTIFY CONTENT - change the alignment on flex items on the main axis
.ds-flex-justify-start {
  justify-content: flex-start;
}
.ds-flex-justify-end {
  justify-content: flex-end;
}
.ds-flex-justify-center {
  justify-content: center;
}
.ds-flex-justify-between {
  justify-content: space-between;
}
.ds-flex-justify-around {
  justify-content: space-around;
}
.ds-flex-justify-evenly {
  justify-content: space-evenly;
}

// FLEX ALIGN ITEMS - change the alignment on flex items on the cross axis
.ds-flex-align-start {
  align-items: start;
}
.ds-flex-align-end {
  align-items: end;
}
.ds-flex-align-center {
  align-items: center;
}
.ds-flex-align-baseline {
  align-items: baseline;
}
.ds-flex-align-stretch {
  align-items: stretch;
}

// FLEX ALIGN SELF - change their alignment on the cross axis
.ds-flex-align-self-start {
  align-self: flex-start;
}
.ds-flex-align-self-end {
  align-self: flex-end;
}
.ds-flex-align-self-center {
  align-self: center;
}
.ds-flex-align-self-baseline {
  align-self: baseline;
}
.ds-flex-align-self-stretch {
  align-self: stretch;
}

// FLEX GROW - toggle a flex item’s ability to grow to fill available space
.ds-flex-grow-0 {
  flex-grow: 0;
}
.ds-flex-grow {
  flex-grow: 1;
}

// FLEX SHRINK - toggle a flex item’s ability to grow to fill available space
.ds-flex-shrink-0 {
  flex-shrink: 0;
}
.ds-flex-shrink {
  flex-shrink: 1;
}

// ORDER
.ds-order-1 {
  order: 1;
}
.ds-order-2 {
  order: 2;
}
.ds-order-3 {
  order: 3;
}
.ds-order-4 {
  order: 4;
}
.ds-order-5 {
  order: 5;
}
.ds-order-6 {
  order: 6;
}
.ds-order-7 {
  order: 7;
}
.ds-order-8 {
  order: 8;
}
.ds-order-9 {
  order: 9;
}
.ds-order-10 {
  order: 10;
}
.ds-order-11 {
  order: 11;
}
.ds-order-12 {
  order: 12;
}

// BOX SIZING - controlling how the browser should calculate an element's total size
.ds-box-border {
  box-sizing: border-box;
}
.ds-box-content {
  box-sizing: content-box;
}

// OPACITY
.ds-opacity-lighter {
  opacity: var(--opacity-lighter);
}
.ds-opacity-light {
  opacity: var(--opacity-light);
}
.ds-opacity-medium {
  opacity: var(--opacity-medium);
}
.ds-opacity-dark {
  opacity: var(--opacity-dark);
}
.ds-opacity-darker {
  opacity: var(--opacity-darker);
}

// FLOAT - controlling the wrapping of content around an element
.ds-float-left {
  float: left;
}
.ds-float-right {
  float: right;
}
.ds-float-none {
  float: none;
}

// POSITION - controlling how an element is positioned in the DOM.
.ds-relative {
  position: relative;
}
.ds-absolute {
  position: absolute;
}
.ds-static {
  position: static;
}
.ds-fixed {
  position: fixed;
}
.ds-sticky {
  position: sticky;
}

// OVERFLOW
.ds-overflow-auto {
  overflow: auto;
}
.ds-overflow-hidden {
  overflow: hidden;
}
.ds-overflow-visible {
  overflow: visible;
}
.ds-overflow-scroll {
  overflow: scroll;
}
.ds-overflow-x-hidden {
  overflow-x: hidden;
}
.ds-overflow-x-visible {
  overflow-x: visible;
}
.ds-overflow-x-scroll {
  overflow-x: scroll;
}
.ds-overflow-y-hidden {
  overflow-y: hidden;
}
.ds-overflow-y-visible {
  overflow-y: visible;
}
.ds-overflow-y-scroll {
  overflow-y: scroll;
}

// VISIBILITY - controlling the visibility of an element
.ds-visible {
  visibility: visible;
}
.ds-invisible {
  visibility: hidden;
}
.ds-collapse {
  visibility: collapse;
}

// Z-INDEX - to quickly change the stack level of an element or component
.ds-z-0 {
  z-index: 0;
}
.ds-z-10 {
  z-index: 10;
}
.ds-z-20 {
  z-index: 20;
}
.ds-z-30 {
  z-index: 30;
}
.ds-z-40 {
  z-index: 40;
}
.ds-z-50 {
  z-index: 50;
}
.ds-z-60 {
  z-index: 60;
}
.ds-z-70 {
  z-index: 70;
}
.ds-z-80 {
  z-index: 80;
}
.ds-z-90 {
  z-index: 90;
}
.ds-z-100 {
  z-index: 100;
}
.ds-z-auto {
  z-index: auto;
}
